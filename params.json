{"name":"SimpleImpersonation","tagline":"Simple Impersonation Library for .Net","body":"SimpleImpersonation\r\n===================\r\n\r\nSimple Impersonation Library for .Net\r\n\r\nThis library provides a managed wrapper for the [LogonUser](http://msdn.microsoft.com/en-us/library/windows/desktop/aa378184.aspx) function of the Win32 API.  Basically, it allows you to impersonate any user, as long as you have their credentials.\r\n\r\nIt is dual compiled for both .Net 2.0 and .Net 4.0 runtimes.  It should work well under .Net 2.0, 3.0, 3.5, 4.0, 4.5, and the client profiles.  It has no dependencies.\r\n\r\nInstallation\r\n------------\r\n\r\nUse NuGet package [SimpleImpersonation](https://nuget.org/packages/SimpleImpersonation/).\r\n\r\n```powershell\r\nPM> Install-Package SimpleImpersonation\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n```csharp\r\nusing (Impersonation.LogonUser(domain, username, password, logonType))\r\n{\r\n    // do whatever you want as this user.\r\n}\r\n```\r\n\r\nBe sure to specify a logon type that makes sense for what you are doing.  For example:\r\n\r\n- If you are interactively working as a particular user from a desktop application, use `LogonType.Interactive`.\r\n\r\n- If you are trying to connect to a SQL server with trusted authentication using specific credentials, use `LogonType.NewCredentials`.\r\n  - But be aware that impersonation is not taken into account in connection pooling.\r\n  - You will also need to vary your connection string.\r\n  - Read more [here](http://stackoverflow.com/q/18198291/634824)\r\n\r\n\r\n\r\nSee the [MSDN documentation](http://msdn.microsoft.com/en-us/library/windows/desktop/aa378184.aspx) for additional logon types.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}